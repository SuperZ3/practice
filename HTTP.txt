if(window.XMLHttpRequest === undefined){
    window.XMLHttpRequest = function(){
        try{
            return new ActiveXObject("Msxml2.XMLHTTP.6.0");
        }
        catch(e1){
           try {
               return new ActiveXObject("Msxml2.XMLHTTP.3.0");
        }
            catch (e2){
                throw new Error("....")
            }
        }
    }
}
【指定请求】
var request = new XMLHttpRequest();
request.open("GET","URL");
request.setRequestHeader("Content-Type","text/plain");
request.send(null);

function get(url,callback){
    var request = new XMLHttpRequest();
    request.open("GET","url");
    request.onreadystatechange = function(){
        if(request.readyState === 4 && request.status === 200){
            var type = request.getResponseHeader("Content-Type");
            if (type.indexOf("xml") !== -1 && request.responseXML)
                callback(request.responseXML);
            else if(type === "application/json")
                callback(JSON.parse(request.reponseText));
            else 
                callback(request.responseText);
        }
    };
    request.send(null);
}
request.overrideMimeType("text/plain,charset=utf-8");
【编码请求主体】编码方案：名字和值采用普通URL编码，MIME类型：Content-Type:application/x-www-form-rullencoded
function encodeFormData(data){
    if(!data) return "";
    var pairs = [];
    for(var name in data){
        if(!data.hasOwnProperty(name)) continue;
        if(typeof data[name] === "function") continue;
        var value = data[name].toString();
        name = encodeURIComponent(name.replace("%20","+"));
        value = encodeURIComponent(value.replace("%20","+"));
        pairs.push(name + "=" + value);
    }
    return pairs.join('&');
}
function postData(url,data,callback){
    var request = new XMLHttpRequest();
    request.open("POST",url);
    request.onreadystatechange = function(){
        if (request.readyState === 4 && callback)
            callback(request);
    };
    request.setRequestHeader("Content-Type","application/x-www-form-urlencode");
    request.send(encodeFromData(data));
}
function getData(url,data,callback){
    var request = new XMLHttpRequest();
    request.open("GET",url + "?" + encodeFormData(data));
    request.onreadystatechange = function(){
        if(request.return === 4 && callback) callback(request);
    };
    request,send(null);
}
function postQuery(url,what,where,radius,callback){
    var request = new XMLHttpRequest();
    reque st.open("POST",url);
    request.onreadystatechange = function(){
        if(request.readyState === 4 && callback) callback(request);
    };
    var doc = document.implementation.createDocument("","query",null);
    var query = doc.documentElemnt;
    var find = doc.createElement("find");
    query.appendChild(find);
    find.setAttribute("zipcode",where);
    find.setAttribute("radius",radius);
    find.appendChild(doc.createTextNode(what));
    request.send(doc);//自动设置请求头
}


支持File对象的浏览器，<input type=“file”>元素有files属性，表示File对象的类数组对象。
whenReady(function(){
    var elts = document.getElementsByTagName("input");
    for(var i = 0;i < elts.length;i++){
        var input = elts[i];
        if(input.type !== "file") continue;
        var url = input.getAttribute("data-uploadto");
        if(!url) continue;
        input.addEventListener("change",function(){
            var file = this.files[0];
            if(!file) return;
            var xhr = new XMLHttpRequest();
            xhr.open("POST",url);
            xhr.send(file);
        },false)
    }
})

function postFormData(url,data,callback){
    if(typeof FormData === "undefined") throw new Error("");
    var request = new XMLHttpRequest();
    request.open("POST",url);
    request.onreadystatechange = function(){
        if(request.readyState === 4 && callback)
            callback(request);
    };
    var formdata = new FormData();
    for(var name in data){
        if(!data.hasOwnProperty(name)) continue;
        var value = data[name];
        if(typeof value === "function") continue;
        formdata.append(name,value);
    }
    request.send(formdata);//在multipart/form-data发送名值对，自动设置头
}

HTTP请求无法完成timeout、abort、error
if("onprogress" in (new XMLHttpRequest())){
    //支持progress事件
}
request.onprogress = function(e){
    if(e.lengthComputable)
        progress.innerHTML = Math.round(100*e.loaded/e.total) + "% Complete";
}

x.onprogress监控下载速度,x.upload.onprogress监控上传速度

function timedGetText(url,timeout,callback){
    var request = new XMLHttpRequest();
    var timedout = false;

    var timer = setTimeout(function(){
        timedout = true;
        request.abort();
    },timeout);
    request.open()"GET",url);
    request.onreadystatechange = function(){
        if(request.readyState !== 4) return;
        if(timedout) return;
        clearTimeout(timer);
        if(request === 200)
            callback(request.responseText);
    };
    request.send(null);
}
跨域HTTP请求,不能发送密码、cookie、HTTP令牌，检查x.withCredentials是否支持跨域
whenReady(function(){
    var supportsCORS = (new XMLHttpRequest()).withCredentials !== undefined;

    var links = document.getElementsByTagName('a');
    for (var i = 0;i < links.length;i++){
        var link = links[i];
        if(!link.href) continue;
        if(link.title) continue;
        if(link.host !== location.host || link.protocol !== location.protocol){
            link.title = "站外连接“;
            if(!supportsCORS) continue;
        }

        if(link.addEventListener)
            link.addEventListener("mouseover",mouseoverHandler,false);
        else
            link.attachEvent("mouseover",mouseoverHandler);
    }
    function mouseoverHandler(e){
        var link = e.target || e.srcElement;
        var url = link.href;
        var req = new XMLHttpRequest();
        req.open("HEAD",url);
        req.onreadystatechange = function(){
            if(req.readyState !== 4) return;
            if(req.status === 200){
                var type = req.getResponseHeader("Content-Type");
                var size = req.getResponseHeader("Content-Length");
                var date = req.getResponseHeader("Last-Modified");

                link.title = type+size+date;
            }
            else{
                if(!link.title)
                    link.title = ""+req.status+req.statusText;
            }
        };
        req.send(null);
        if(link.removeEventListener)
            link.removeEventListener("mouseover",mouseoverHandler,false);
        else
            link.detachEvent("onmouseover",mouseoverHandler);
    }
}) 

(function(n){
    var out = out1 = 1;
    var out2;
    if (n == 0){
        console.log(1);
    }
    else if(n > 0){
        while(n>0){
            out *= 2;
            n--;
        }
        console.log(out);
    }
    else if(n < 0){
        var n1 = -n;
        for(;n1-- > 0;){
            out1 *= 2;
        }
        out2 = 1/out1;
        console.log(out2);
    };
}(10));

(function f(n){
    var a;
    if( n <= 2){
        a = 1;
    }
    else{
            a = f(n-1)+f(n-2);
            console.log(a);
    }
}(7));